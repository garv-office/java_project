day 3 :some mcq:
-----------------

	
Day 3:
------
    • Exception Handling 
	Try-catch, Multiple Catch Block, Nested try, 
	Finally, Throw Keyword, Exception Propagation, 
	Throws Keyword, Throw vs Throws, 
	Final vs Finally vs Finalize Exception, Custom Exception.
   
    Java IO 
	
	Java Collections – Map, Set, List, Enumerators, Comparator & Comparable
	
	
Quick recap:
-------------
	relationship bw the objects
	Inheritance 
	Type of inheritance
	polymorphism

    • OOPs - Object, Class, Java keywords,
	Attributes, Methods, Inheritance (Is-A & HAS-A), 
	Polymorphism, Abstraction, Encapsulation, Constructor, Static, this keyword.
    • Access Modifiers – Private, Public, Protected
    • Overloading & overriding.



Pending topics:
-----------------
	  //Immutablity?  
	  //how to immutable classes? 
	  //relationship bw thread safty vs Immutablity 
	  protected void finalize() throws java.lang.Throwable;

	
    • Object Cloning
    • Features of Java 5 - For-each loop, Varargs, Static Import, 
	 Autoboxing and Unboxing, Enum, Covariant Return Type, Annotation, Generics.
    • Inner & Nested Classes.
	
	Reflection:
		Constructor[] constructors=SingletonObject.class.getDeclaredConstructors();
		constructors[0].setAccessible(true);
		SingletonObject s2=(SingletonObject) constructors[0].newInstance();
		
	Clonning:
		 // call Object.clone()
		 Employee cloned = (Employee) super.clone();

		// clone mutable fields
		 cloned.hireDay = (Date) hireDay.clone();

		 return cloned;
		 
	visibility modifer:
	
	data/method:
	--------------
	public 
	protected
	default
	private
	
	class:(top level class)
	---------
	public 
	default
	
	 class M{
		
	}


class StackImplRavi {
	private int x[];
	private final int SIZE;
	private int top;
	
	public StackImpUsingArray(int size) {
		this.SIZE=size;
		top=-1;
		
	}
	
	
	public void pushRavi(int element){
		if(top>=SIZE)
			return ;
		else
			x[top++]=element;
	}
	
	
	public int popRavi(){
		if(top==-1)
			return -99;
		else
			return x[top--];
	}
}


	
	
Q7. What is the output when following code is compiled:
final class Foo{}
class Bar extends Foo{}

A. Result in compilation error
B. Results in runtime error
B. Code will compile or not depend on Java version
 D. None of these
 
 
 
 
 
 
 
 
 
 
 


Q8. Consider following example: Skip
public interface xyz {
	void abc() throws IOException;
}
public interface pqr {
	void abc() throws FileNotFoundException;
}
public class Implementation implements xyz, pqr {
	void abc() throws FileNotFoundException;
}
Which of the following statement(s) can you insert in place of “// insert code” comment?
A. public void abc() throws IOException
B. public void abc() throws FileNotFoundException
C. public void abc() throws FileNotFoundException, IOException
D. public void abc() throws IOException, FileNotFoundException





interface X extends Y{
}

interface Y{
}

Q9. Which are true? (Choose all that apply.)
A. "X extends Y" is correct if and only if X is a class and Y is an interface.(F)
B. "X extends Y" is correct if and only if X is an interface and Y is a class.(F)
C. "X extends Y" is correct if X and Y are either both classes or both interfaces.(T)
D. "X extends Y" is correct for all combinations of X and Y being classes and/or interfaces.(F)

Q10.  Given:
class Rocket {
private void blastOff() { System.out.print("bang "); }
}
public class Shuttle extends Rocket {
public static void main(String[] args) {
new Shuttle().go();
}
void go() {
blastOff();
// Rocket.blastOff(); // line A
}
private void blastOff() { System.out.print("sh-bang "); }
}
Which are true?
A. As the code stands, the output is bang
B. As the code stands, the output is sh-bang
C. As the code stands, compilation fails.
D. If line A is uncommented, the output is bang bang


Q11. interface Gadget {
void doStuff();
}
abstract class Electronic {
void getPower() { System.out.print("plug in "); }
}
public class Tablet extends Electronic implements Gadget {
void doStuff() { System.out.print("show book "); }
public static void main(String[] args) {
new Tablet().getPower();
new Tablet().doStuff();
}
}
Which are true? (Choose all that apply.)
A. The class Tablet will NOT compile
B. The interface Gadget will NOT compile
C. The output will be plug in show book
D. The abstract class Electronic will NOT compile


Q12 . What is not true about java interface
    1. We can not define instance variable inside Java interface 
    2. We can define constant inside java interface
    3. We can have constructor inside java interface
    4. All are correct
	
-----------
annotation
	java 5: aka meta data "data about data"
	
		JAVA FRAMEWORK NOW AS DAY= concept+ annotations
		
	
	
	class Foo{
		void ffdsgfkdjlfjdklfd(){
				I
		}
	}
		
	class Bar extends  Foo{
		void ffdsgfdjlfjdklfd(){
				II
		}
	}
	
	Main:
			Foo f=new Foo();
			f.ffdsgfkdjlfjdklfd();
	
	
	@Controller
	class AccountController{
	
		@Autowire
		private AccountService accountService;
		
	
	
	}
	
	
	
	
	
	
	
	
immutablity
refleaction 
thread safty*
