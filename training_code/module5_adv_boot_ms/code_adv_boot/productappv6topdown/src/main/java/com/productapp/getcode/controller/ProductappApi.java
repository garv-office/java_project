/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.productapp.getcode.controller;

import com.productapp.getcode.dto.ProductDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-06T11:35:02.499881800+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "product-controller-v-1", description = "the product-controller-v-1 API")
public interface ProductappApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /productapp/v1/products
     *
     * @param productDto  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "addProduct",
        tags = { "product-controller-v-1" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/productapp/v1/products",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> addProduct(
        @Parameter(name = "ProductDto", description = "", required = true) @Valid @RequestBody ProductDto productDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /productapp/v1/products/{id}
     *
     * @param id  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "delete",
        tags = { "product-controller-v-1" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/productapp/v1/products/{id}"
    )
    default ResponseEntity<Void> delete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /productapp/v1/products
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAll",
        tags = { "product-controller-v-1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = ProductDto.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/productapp/v1/products",
        produces = { "application/xml", "application/json" }
    )
    default ResponseEntity<List<ProductDto>> getAll(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"_links\" : { \"key\" : { \"hreflang\" : \"hreflang\", \"templated\" : true, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"title\" : \"title\", \"type\" : \"type\", \"deprecation\" : \"deprecation\" } }, \"price\" : 6.027456183070403, \"name\" : \"name\", \"id\" : 0 }, { \"_links\" : { \"key\" : { \"hreflang\" : \"hreflang\", \"templated\" : true, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"title\" : \"title\", \"type\" : \"type\", \"deprecation\" : \"deprecation\" } }, \"price\" : 6.027456183070403, \"name\" : \"name\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<ProductDto> <id>123</id> <name>aeiou</name> <price>3.149</price> <_links>UNDEFINED_EXAMPLE_VALUE</_links> </ProductDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /productapp/v1/products/v1/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getById",
        tags = { "product-controller-v-1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ProductDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/productapp/v1/products/v1/{id}",
        produces = { "*/*" }
    )
    default ResponseEntity<ProductDto> getById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"_links\" : { \"key\" : { \"hreflang\" : \"hreflang\", \"templated\" : true, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"title\" : \"title\", \"type\" : \"type\", \"deprecation\" : \"deprecation\" } }, \"price\" : 6.027456183070403, \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /productapp/v1/productsbyname/{name}
     *
     * @param name  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getByName",
        tags = { "product-controller-v-1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = ProductDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/productapp/v1/productsbyname/{name}",
        produces = { "*/*" }
    )
    default ResponseEntity<List<ProductDto>> getByName(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "[ { \"_links\" : { \"key\" : { \"hreflang\" : \"hreflang\", \"templated\" : true, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"title\" : \"title\", \"type\" : \"type\", \"deprecation\" : \"deprecation\" } }, \"price\" : 6.027456183070403, \"name\" : \"name\", \"id\" : 0 }, { \"_links\" : { \"key\" : { \"hreflang\" : \"hreflang\", \"templated\" : true, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"title\" : \"title\", \"type\" : \"type\", \"deprecation\" : \"deprecation\" } }, \"price\" : 6.027456183070403, \"name\" : \"name\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /productapp/v1/products/{id}
     *
     * @param id  (required)
     * @param productDto  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateProduct",
        tags = { "product-controller-v-1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ProductDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/productapp/v1/products/{id}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductDto> updateProduct(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "ProductDto", description = "", required = true) @Valid @RequestBody ProductDto productDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"_links\" : { \"key\" : { \"hreflang\" : \"hreflang\", \"templated\" : true, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"title\" : \"title\", \"type\" : \"type\", \"deprecation\" : \"deprecation\" } }, \"price\" : 6.027456183070403, \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
